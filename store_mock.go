// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package main is a generated GoMock package.
package main

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mockstorer is a mock of storer interface
type Mockstorer struct {
	ctrl     *gomock.Controller
	recorder *MockstorerMockRecorder
}

// MockstorerMockRecorder is the mock recorder for Mockstorer
type MockstorerMockRecorder struct {
	mock *Mockstorer
}

// NewMockstorer creates a new mock instance
func NewMockstorer(ctrl *gomock.Controller) *Mockstorer {
	mock := &Mockstorer{ctrl: ctrl}
	mock.recorder = &MockstorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockstorer) EXPECT() *MockstorerMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *Mockstorer) Insert(topic string, value value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", topic, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockstorerMockRecorder) Insert(topic, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*Mockstorer)(nil).Insert), topic, value)
}

// GetNext mocks base method
func (m *Mockstorer) GetNext(topic string) (value, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNext", topic)
	ret0, _ := ret[0].(value)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNext indicates an expected call of GetNext
func (mr *MockstorerMockRecorder) GetNext(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNext", reflect.TypeOf((*Mockstorer)(nil).GetNext), topic)
}

// Ack mocks base method
func (m *Mockstorer) Ack(topic string, ackOffset int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack", topic, ackOffset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack
func (mr *MockstorerMockRecorder) Ack(topic, ackOffset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*Mockstorer)(nil).Ack), topic, ackOffset)
}

// Nack mocks base method
func (m *Mockstorer) Nack(topic string, ackOffset int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nack", topic, ackOffset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Nack indicates an expected call of Nack
func (mr *MockstorerMockRecorder) Nack(topic, ackOffset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nack", reflect.TypeOf((*Mockstorer)(nil).Nack), topic, ackOffset)
}

// Back mocks base method
func (m *Mockstorer) Back(topic string, ackOffset int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Back", topic, ackOffset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Back indicates an expected call of Back
func (mr *MockstorerMockRecorder) Back(topic, ackOffset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Back", reflect.TypeOf((*Mockstorer)(nil).Back), topic, ackOffset)
}

// Close mocks base method
func (m *Mockstorer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockstorerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mockstorer)(nil).Close))
}

// Destroy mocks base method
func (m *Mockstorer) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy
func (mr *MockstorerMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*Mockstorer)(nil).Destroy))
}
